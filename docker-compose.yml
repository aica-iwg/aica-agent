---

services:
  manager:
    build:
      context: manager
      additional_contexts:
        common: common
    platform: linux/amd64
    container_name: manager
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      manager_mq:
        condition: service_healthy
      manager_db:
        condition: service_healthy
      manager_mongodb:
        condition: service_healthy
      manager_graphdb:
        condition: service_healthy
    volumes:
      - graphml_share:/graph_data
      # For testing
      - ./pcaps:/usr/src/app/pcaps
    # For PCAPs
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW

  manager_db:
    image: postgres:13.8-bullseye
    platform: linux/amd64
    container_name: manager_db
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - pg_data:/var/lib/postgresql/data
    network_mode: "host"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5

  manager_mq:
    build: manager_mq
    platform: linux/amd64
    container_name: manager_mq
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./manager_mq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    network_mode: "host"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  manager_mongodb:
    build: manager_mongodb
    platform: linux/amd64
    container_name: manager_mongodb
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - mongo_data:/data/db
    network_mode: "host"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ping: 1})'"]
      interval: 20s
      timeout: 10s
      retries: 5

  manager_graphdb:
    build: manager_graphdb
    platform: linux/amd64
    container_name: manager_graphdb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # https://neo4j.com/docs/operations-manual/current/docker/ref-settings/
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms.usage_report.enabled: false
      apoc.export.file.enabled: true
      apoc.import.file.enabled: true
      apoc.import.file.use_neo4j_config: false
    volumes:
      - neo_data:/var/lib/neo4j/data
      - graphml_share:/graph_data
    network_mode: "host"
    healthcheck:
      test: ["CMD-SHELL", "wget http://localhost:7474/"]
      interval: 10s
      timeout: 10s
      retries: 10

  ids:
    build: ./ids
    platform: linux/amd64
    container_name: ids
    command: sh /usr/local/bin/docker_entrypoint.sh
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: "host"

  opensearch:
    build:
      context: opensearch
      additional_contexts:
        common: common
    platform: linux/amd64
    container_name: opensearch
    # Required so that ES generates an acceptable SAN in its HTTPS Cert
    hostname: "opensearch"
    env_file:
      - .env
    environment:
      node.name: "opensearch"
      cluster.name: "aica"
      discovery.type: "single-node"
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
      DISABLE_INSTALL_DEMO_CONFIG: true
    network_mode: "host"
    volumes:
      - opensearch_data:/usr/share/opensearch/data

  opensearch_dashboards:
    build:
      context: opensearch_dashboards
      additional_contexts:
        common: common
    platform: linux/amd64
    hostname: "opensearch_dashboards"
    depends_on:
      - opensearch
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - opensearch_dashboards_data:/usr/share/opensearch-dashboards/data
    network_mode: "host"

networks:
  frontend:

volumes:
  mongo_data:
  pg_data:
  opensearch_data:
  opensearch_dashboards_data:
  neo_data:
  graphml_share:
