---
version: "3.8"

services:
  manager:
    build: manager
    container_name: 'manager'
    env_file:
      - 'manager/.env'
    tty: true
    ports:
      - "8000:8000" # Django frontend
      - "5555:5555" # Celery Flower
    restart: always
    depends_on:
      manager_mq:
        condition: service_healthy
      manager_db:
        condition: service_healthy
      manager_mongodb:
        condition: service_healthy
      manager_graphdb:
        condition: service_healthy
    networks:
      - bridge
      - control
      - target

  manager_db:
    image: postgres:13.8-bullseye
    container_name: 'manager_db'
    env_file:
      - 'manager/.env'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - control

  manager_mq:
    image: rabbitmq:3.11-management-alpine
    container_name: 'manager_mq'
    volumes:
      - ./manager_mq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - control

  manager_mongodb:
    build: manager_mongodb
    container_name: 'manager_mongodb'
    env_file:
      - 'manager/.env'
    networks:
      - control
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ping: 1})'"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  manager_graphdb:
    image: neo4j:4.4-community
    container_name: 'manager_graphdb'
    env_file:
      - 'manager/.env'
    ports:
      - "7474:7474"  # Neo4j web GUI
      - "7687:7687"  # Neo4j API port (needed for web GUI)
    networks:
      - control
    healthcheck:
      test: [ "CMD-SHELL", "wget http://localhost:7474/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

networks:
  bridge:
  control:
  target:
