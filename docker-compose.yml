---
version: "3.8"

services:
  manager:
    build: ./aica_django
    container_name: 'manager'
    env_file:
      - 'aica_django/.env'
    command: sh /usr/local/bin/docker_entrypoint.sh
    tty: true
    volumes:
      - ./aica_django/docker_entrypoint.sh:/usr/local/bin/docker_entrypoint.sh
      - ids_log:/var/log/suricata
    ports:
      - 5555:5555
      - 8000:8000
    depends_on:
      - manager_db
      - manager_mq
      - manager_mongodb
      - ids
    networks:
      - bridge
      - control
      - target
  manager_db:
    image: postgres:13-buster
    container_name: 'manager_db'
    volumes:
      - manager_db:/var/lib/postgresql/data
    env_file:
      - 'aica_django/.env'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - control
  manager_mq:
    image: rabbitmq:3-management
    container_name: 'manager_mq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - manager_mq_data:/var/lib/rabbitmq
      - manager_mq_log:/var/log/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - control
  attacker:
    build: ./attacker
    container_name: 'attacker'
    networks:
      - target
    tty: true
  target:
    build: ./target
    container_name: 'target'
    command: sh /usr/local/bin/docker_entrypoint.sh
    sysctls:
      - net.ipv4.conf.all.forwarding=1
    cap_add:
      - sys_nice
      - net_admin
    networks:
      - target
  ids:
    build: ./ids
    container_name: 'ids'
    command: sh /usr/local/bin/docker_entrypoint.sh
    volumes:
      - ids_log:/var/log/suricata
    cap_add:
      - sys_nice
      - net_admin
    network_mode: 'service:target'
  honeypot:
    build: ./honeypot
    container_name: 'honeypot'
    command: /usr/bin/opencanaryd --dev
    volumes:
      - ./honeypot/opencanary.conf:/etc/opencanaryd/opencanary.conf
    networks:
      - target
  manager_mongodb:
    image: mongo:4
    container_name: 'manager_mongodb'
    env_file:
      - 'aica_django/.env'
    volumes:
      - ./mongodb/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
      - ./mongodb/docker_healthcheck.sh:/usr/local/bin/docker_healthcheck.sh
      - mongodb:/data/db
    ports:
      - 27017:27017
    networks:
      - control
    healthcheck:
      test: ["CMD-SHELL", "docker_healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  manager_db:
  manager_mq_data:
  manager_mq_log:
  ids_log:
  mongodb:

networks:
  bridge:
  control:
  target:
