---

services:
  manager:
    build: manager
    platform: linux/amd64
    container_name: manager
    restart: on-failure:2  # unless-stopped
    env_file:
      - manager/.env
    ports:
      - "8000:8000"  # Django frontend
      - "5555:5555"  # Celery Flower
    depends_on:
      manager_mq:
        condition: service_healthy
      manager_db:
        condition: service_healthy
      manager_mongodb:
        condition: service_healthy
      manager_graphdb:
        condition: service_healthy
    volumes:
      - graphml_share:/graph_data
      # For testing
      - ./pcaps:/usr/src/app/pcaps
    networks:
      bridge:
      control:
        ipv4_address: 10.107.50.150
    # For PCAPs
    cap_add:
      - NET_ADMIN
      - NET_RAW

  manager_db:
    image: postgres:13.8-bullseye
    platform: linux/amd64
    container_name: manager_db
    restart: unless-stopped
    env_file:
      - manager/.env
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      control:
        ipv4_address: 10.107.50.200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5

  manager_mq:
    build: manager_mq
    platform: linux/amd64
    container_name: manager_mq
    restart: unless-stopped
    volumes:
      - ./manager_mq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      control:
        ipv4_address: 10.107.50.210
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  manager_mongodb:
    build: manager_mongodb
    platform: linux/amd64
    container_name: manager_mongodb
    restart: unless-stopped
    env_file:
      - manager/.env
    volumes:
      - mongo_data:/data/db
    networks:
      control:
        ipv4_address: 10.107.50.220
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ping: 1})'"]
      interval: 10s
      timeout: 10s
      retries: 5

  manager_graphdb:
    build: manager_graphdb
    platform: linux/amd64
    container_name: manager_graphdb
    restart: unless-stopped
    environment:
      # https://neo4j.com/docs/operations-manual/current/docker/ref-settings/
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms.usage_report.enabled: false
      apoc.export.file.enabled: true
      apoc.import.file.enabled: true
      apoc.import.file.use_neo4j_config: false
    env_file:
      - manager/.env
    volumes:
      - neo_data:/var/lib/neo4j/data
      - graphml_share:/graph_data
    ports:
      - "7474:7474"  # Neo4j web GUI
      - "7687:7687"  # Neo4j API port (needed for web GUI)
    networks:
      bridge:
      control:
        ipv4_address: 10.107.50.230
    healthcheck:
      test: ["CMD-SHELL", "wget http://localhost:7474/"]
      interval: 10s
      timeout: 10s
      retries: 10

  elasticsearch:
    build: elasticsearch
    platform: linux/amd64
    container_name: elasticsearch
    # Required so that ES generates an acceptable SAN in its HTTPS Cert
    hostname: "elasticsearch"
    env_file:
      - manager/.env
    environment:
      node.name: "elasticsearch"
      cluster.name: "aica"
      discovery.type: "single-node"
      xpack.security.enabled: true
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    networks:
      control:
        ipv4_address: 10.107.50.240
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    healthcheck:
      test: ["CMD-SHELL",
             "curl --insecure -u elastic:$${ELASTIC_PASSWORD} -s -X GET 'http://localhost:9200/_cluster/health?pretty'
             | grep '\"status\" : \"green\"'"]
      interval: 10s
      timeout: 30s
      retries: 20

  siem:
    build: siem
    platform: linux/amd64
    container_name: siem
    env_file:
      manager/.env
    depends_on:
      manager_mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      control:
        ipv4_address: 10.107.50.250
    ports:
      - "9000:9000"  # Graylog web GUI
    healthcheck:
      test: ["CMD-SHELL", "wget http://localhost:9000"]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  mongo_data:
  pg_data:
  es_data:
  neo_data:
  graphml_share:

networks:
  bridge:
  control:
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 10.107.50.0/24
          ip_range: 10.107.50.128/25
          gateway: 10.107.50.1
