import unittest

from semver import VersionInfo

from cyst.api.environment.environment import Environment
from cyst.api.logic.exploit import ExploitCategory, ExploitLocality


class TestExploit(unittest.TestCase):

    @classmethod
    def setUpClass(cls) -> None:
        cls._env = Environment.create()
        cls._exploitStore = cls._env.resources.exploit_store

        cls._EX = cls._env.configuration.exploit.create_exploit
        cls._VS = cls._env.configuration.exploit.create_vulnerable_service
        cls._MSG = cls._env.messaging.create_request

    def test_0000_service_construction(self) -> None:
        vuln1 = self._VS("vuln1")

        self.assertEqual(vuln1.min_version, VersionInfo.parse("0.0.0"), "Empty version info")
        self.assertEqual(vuln1.max_version, VersionInfo.parse("0.0.0"), "Empty version info")

        with (self.assertRaises(Exception)):
            vuln2 = self._VS("vuln2", "1.2.3", "1.0.0")

    def test_0001_exploit_store(self) -> None:
        e1 = self._EX("e1", [self._VS("vuln1"), self._VS("vuln2")], ExploitLocality.LOCAL, ExploitCategory.AUTH_MANIPULATION)
        e2 = self._EX("e2", [self._VS("vuln1"), self._VS("vuln2")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)
        e3 = self._EX("e3", [self._VS("vuln2")], ExploitLocality.REMOTE, ExploitCategory.AUTH_MANIPULATION)
        e4 = self._EX("e4", [self._VS("vuln3")], ExploitLocality.REMOTE, ExploitCategory.DATA_MANIPULATION)

        self._env.configuration.exploit.add_exploit(e1, e2, e3, e4)

        self.assertEqual(self._exploitStore.get_exploit("e3")[0].id, "e3")

        exploit_ids = [x.id for x in self._exploitStore.get_exploit(service="vuln2")]
        self.assertEqual(set(exploit_ids), {"e1", "e2", "e3"})

        exploit_ids = [x.id for x in self._exploitStore.get_exploit(service="vuln3")]
        self.assertEqual(set(exploit_ids), {"e4"})

        exploit_ids = [x.id for x in self._exploitStore.get_exploit(category=ExploitCategory.DATA_MANIPULATION)]
        self.assertEqual(set(exploit_ids), {"e2", "e4"})

        exploit_ids = [x.id for x in self._exploitStore.get_exploit(service="vuln1", category=ExploitCategory.AUTH_MANIPULATION)]
        self.assertEqual(set(exploit_ids), {"e1"})

        self._env.configuration.exploit.clear_exploits()

    def test_0002_evaluation(self) -> None:
        service = self._env.configuration.service.create_passive_service("http", owner="http", version="1.0.3")

        attacker = self._env.configuration.node.create_node("attacker1", "10.0.0.1")
        node1 = self._env.configuration.node.create_node("node1", "10.0.0.2")
        node2 = self._env.configuration.node.create_node("node2")

        self._env.configuration.node.add_service(node1, service)
        self._env.configuration.node.add_service(node2, service)

        self._env.configuration.network.add_node(attacker)
        self._env.configuration.network.add_node(node1)
        self._env.configuration.network.add_node(node2)

        self._env.configuration.network.add_connection(attacker, node1, 0, 0)

        session = self._env.configuration.network.create_session("attacker1", [attacker, node1])

        e1 = self._EX("e1", [self._VS("http", "1.0.1", "1.1.0")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)
        e2 = self._EX("e2", [self._VS("ssh")], ExploitLocality.REMOTE, ExploitCategory.AUTH_MANIPULATION)
        e3 = self._EX("e3", [self._VS("http", "0.9.6", "0.9.8")], ExploitLocality.LOCAL, ExploitCategory.DATA_MANIPULATION)

        self._env.configuration.exploit.add_exploit(e1, e2, e3)

        self.assertEqual(self._exploitStore.evaluate_exploit("e99", self._MSG("10.0.0.2", dst_service="http"), node1), (False, "Could not find exploit by id"))
        self.assertEqual(self._exploitStore.evaluate_exploit("e1", self._MSG("10.0.0.2", dst_service="http"), node1), (False, "Local exploits can only be used from within an existing session"))
        self.assertEqual(self._exploitStore.evaluate_exploit("e1", self._MSG("10.0.0.2", dst_service="http", session=session), node2), (False, "Local exploits can only be used at session endpoint."))
        self.assertEqual(self._exploitStore.evaluate_exploit("e1", self._MSG("10.0.0.2", dst_service="ssh", session=session), node1), (False, "Attempting to use exploit on a service it does not apply to"))
        self.assertEqual(self._exploitStore.evaluate_exploit("e2", self._MSG("10.0.0.2", dst_service="ssh", session=session), node1), (False, "The exploit is not fit for any of the services on the node"))
        self.assertEqual(self._exploitStore.evaluate_exploit("e3", self._MSG("10.0.0.2", dst_service="http", session=session), node1), (False, "The exploit is not applicable on the current version of a service"))
        self.assertEqual(self._exploitStore.evaluate_exploit("e1", self._MSG("10.0.0.2", dst_service="http", session=session), node1), (True, ""))
